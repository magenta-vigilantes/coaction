{"version":3,"sources":["app.js","controllers/login-controller.js","controllers/logout-controller.js","controllers/new-task-controller.js","controllers/new-user-controller.js","controllers/task-list-controller.js","controllers/user-controller.js","models/task.js","models/user.js","nav/main-nav-controller.js","utils/string-util.js","services/status-service.js","services/task-service.js","services/user-service.js","errors/404/error-404-controller.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// Declare our app module, and import the ngRoute and ngAnimate\n// modules into it.\nvar app = angular.module('app', ['ngRoute']);\n\n// Set up our 404 handler\napp.config(['$routeProvider', function ($routeProvider) {\n  $routeProvider.otherwise({\n    controller: 'Error404Ctrl',\n    controllerAs: 'vm',\n    templateUrl: 'static/errors/404/error-404.html'\n  });\n}]);\n","app.config(['$routeProvider', function($routeProvider){\n  $routeProvider.when('/login/', {\n    controller: 'LoginCtrl',\n    controllerAs: 'vm',\n    templateUrl: 'static/views/login.html'\n  });\n}])\n.controller('LoginCtrl', ['$location', 'User', 'userService', function($location, User, userService){\n  var self = this;\n\n  self.user = User();\n\n  self.goToTaskList = function() {\n    $location.path('/tasks');\n  };\n\n  self.loginUser = function(){\n    userService.loginUser(self.user).then(self.goToTaskList);\n  }\n}])\n","app.config(['$routeProvider', function($routeProvider){\n  $routeProvider.when('/logout/', {\n    controller: 'LogoutCtrl',\n    controllerAs: 'vm',\n    templateUrl: 'api/logout/'\n  });\n}])\n.controller('LoginCtrl', ['$location', 'User', 'userService', function($location, User, userService){\n  var self = this;\n\n  self.user = User();\n\n  self.goToLogin = function() {\n    $location.path('/login');\n  };\n\n  self.logoutUser = function(){\n    userService.loginUser(self.user).then(self.goToLogin);\n  }\n}])\n","app.config(['$routeProvider', function ($routeProvider) {\n  $routeProvider.when('/tasks/new', {\n    controller: 'NewTaskCtrl',\n    controllerAs: 'vm',\n    templateUrl: 'static/views/add-new-task.html'\n  });\n}]).controller('NewTaskCtrl', ['$location', 'Task', 'taskService', function($location, Task, taskService) {\n\n  var self = this;\n  self.task = Task();\n\n  self.goToTaskList = function () {\n    $location.path('/tasks');\n  };\n\n  self.addTask = function () {\n    taskService.addTask(self.task).then(self.goToTaskList);\n  };\n\n\n\n}]);\n","app.config(['$routeProvider', function ($routeProvider) {\n  $routeProvider.when('/signup/', {\n    controller: 'NewUserCtrl',\n    controllerAs: 'vm',\n    templateUrl: 'static/views/signup.html'\n  });\n}])\n.controller('NewUserCtrl', ['$location', 'User', 'userService', function($location, User, userService){\n  var self = this;\n\n  self.user = User();\n\n  self.goToTaskList = function () {\n    $location.path('/tasks');\n  };\n\n  self.addUser = function(){\n    userService.addUser(self.user).then(self.goToTaskList);\n  };\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n\n  var routeDefinition = {\n    templateUrl: 'static/views/task-list.html',\n    controller: 'TaskListCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      taskList: ['taskService', function(taskService){\n        return taskService.getTaskList();\n      }]\n    }\n  };\n\n  $routeProvider.when('/', routeDefinition);\n  $routeProvider.when('/tasks', routeDefinition);\n}])\n.controller('TaskListCtrl', ['taskList', 'taskService', 'Task', function(taskList, taskService, Task){\n\n  var self = this;\n\n  self.taskList = taskList;\n\n  self.status = function (task, status) {\n    task.status = status;\n    console.log(task.id);\n    taskService.status(task.id, task);\n  };\n\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/views/user.html',\n    controller: 'UserCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      user: ['$route', 'userService', function($route, userService){\n        var routeParams = $route.current.params;\n        return userService.getByUserId(routeParams.userid);\n      }]\n    }\n  };\n\n  $routeProvider.when('/users/:userid', routeDefinition); //IF PROJECT MESSES UP, CHECK HERE!!!!!!!!\n}])\n.controller('UserCtrl', ['user', function(user){\n  var self = this;\n\n  self.user = user;\n}]);\n","app.factory('Task', function(){\n  return function(spec) {\n    spec = spec || {};\n    return {\n      due_date: spec.due_date,\n      status: spec.status || 'new',\n      title: spec.title,\n      assignee: spec.assignee\n    };\n  };\n});\n\n\n// TO BE CONTINUED\n","app.factory('User', function(){\n  return function (spec) {\n    spec = spec || {};\n    return {\n      name: spec.name,\n      email: spec.email,\n      password: spec.password\n    };\n  };\n});\n","app.controller('MainNavCtrl',\n['$location', 'StringUtil', function($location, StringUtil) {\n  var self = this;\n\n  self.isActive = function (path) {\n    // The default route is a special case.\n    if (path === '/') {\n      return $location.path() === '/';\n    }\n\n    return StringUtil.startsWith($location.path(), path);\n  };\n}]);\n","app.factory('StringUtil', function() {\n  return {\n    startsWith: function (str, subStr) {\n      str = str || '';\n      return str.slice(0, subStr.length) === subStr;\n    }\n  };\n});\n","// app.factory('statusService', ['$http', function($http) {\n//   function post(url, data) {\n//     return processAjaxPromise($http.post(url, data));\n//   }\n//\n//   function processAjaxPromise(promise) {\n//     return promise.then(function (result) {\n//       return result.data;\n//     })\n//     .catch(function (error) {\n//       $log.log(error);\n//     });\n//   }\n//\n//   return {\n//     status: function (id, data) {\n//       return put('/api/tasks/' + id, data);\n//     }\n//   };\n// }]);\n","app.factory('taskService', ['$http', '$log', function($http, $log){\n\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function post(url, task) {\n    return processAjaxPromise($http.post(url, task));\n  }\n\n  function put(url, data) {\n    return processAjaxPromise($http.put(url, data));\n  }\n\n  function remove(url) {\n    return processAjaxPromise($http.delete(url));\n  }\n\n  function processAjaxPromise(promise) {\n    return promise.then(function (result) {\n      return result.data;\n    })\n    .catch(function (error) {\n      $log.log(error);\n    });\n  }\n\n  return {\n    getTaskList: function() {\n      return get('api/tasks').then(function(data){\n        return data.tasks;\n      });\n    },\n\n    getTask: function(id) {\n      return get('api/tasks/' + id);\n    },\n\n    addTask: function(task) {\n      return post('api/tasks', task);\n    },\n\n    deleteTask: function(id) {\n      return remove('/api/task/' + id);\n    },\n\n    status: function(id, data) {\n      console.log(id);\n      return put('api/tasks/' + id, data);\n\n    }\n  };\n}]);\n","app.factory('userService', ['$http', '$q', '$log', function($http, $q, $log){\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function processAjaxPromise(promise){\n    return promise.then(function(result){\n      return result.data;\n    })\n    .catch(function(error){\n      $log.log(error);\n    });\n  }\n\n  return {\n    getUserList: function () {\n      return get('/api/users');\n    },\n\n    getByUserId: function(userId){\n      if (!userId) {\n        throw new Error('getByUserId requires a user id');\n      }\n\n      return get('/api/users/' + userId);\n    },\n\n    addUser: function(user) {\n      return processAjaxPromise($http.post('/api/register', user));\n    },\n\n    loginUser: function(user) {\n      return processAjaxPromise($http.post('/api/login', user));\n    },\n\n    logoutUser: function(user) {\n      return processAjaxPromise($http.post('/api/logout', user));\n    }\n  };\n}]);\n","app.controller('Error404Ctrl', ['$location', function ($location) {\n  this.message = 'Could not find: ' + $location.url();\n}]);\n"],"sourceRoot":"/source/"}